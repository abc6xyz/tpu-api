// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hardware {
  id                    Int               @id @default(autoincrement())
  sku                   String
  name                  String
}

model Collection {
  id                    Int               @id @default(autoincrement())
  name                  String
  slug                  String
  description           String
}

model Model {
  id                    Int               @id @default(autoincrement())
  cover_image_url       String?
  created_at            String
  default_example       Json
  description           String?
  github_url            String?
  latest_version        Json
  license_url           String?
  name                  String
  owner                 String
  paper_url             String?
  run_count             Int
  url                   String
  visibility            String
  prediction            Prediction[]
  collection_id         Int[]
}

model Prediction {
  id                    Int               @id @default(autoincrement())
  input                 Json
  result                Json
  model_id              Int
  model                 Model             @relation(fields: [model_id], references: [id], onDelete: Cascade)
  user_id               Int
  user                  User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model ApiKey {
  id                    Int               @id @default(autoincrement())
  name                  String            @unique     // both indexed and unique
  key                   String
  user_id               Int
  user                  User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model User {
  id                    Int               @id @default(autoincrement())
  wallet                String            @unique     // both indexed and unique
  balance               Int               @default(0)
  prediction            Prediction[]
  apikey                ApiKey[]
}
